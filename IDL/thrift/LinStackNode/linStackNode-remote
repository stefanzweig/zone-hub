#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from LinStackNode import linStackNode
from LinStackNode.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  result reset()')
    print('  result setConfig(genericString req)')
    print('  result setChannelConig(linChannelConfigs req)')
    print('  result startLinStack()')
    print('  result stopLinStack()')
    print('  result setMessageSimulation(linMessageConfig req)')
    print('  result setHeaderSimulation(linHeaderConfig req)')
    print('  result setMessageData(linMessageDataT req)')
    print('  linStackStatus getStatus()')
    print('  result clearSubscribe()')
    print('  result clearSend(genericInt req)')
    print('  result setLinCrcConfig(linCrcConfig req)')
    print('  result clearLinCrcConfig(linCrcConfig req)')
    print('  genericInt64 getDeltaTime()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = linStackNode.Client(protocol)
transport.open()

if cmd == 'reset':
    if len(args) != 0:
        print('reset requires 0 args')
        sys.exit(1)
    pp.pprint(client.reset())

elif cmd == 'setConfig':
    if len(args) != 1:
        print('setConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.setConfig(eval(args[0]),))

elif cmd == 'setChannelConig':
    if len(args) != 1:
        print('setChannelConig requires 1 args')
        sys.exit(1)
    pp.pprint(client.setChannelConig(eval(args[0]),))

elif cmd == 'startLinStack':
    if len(args) != 0:
        print('startLinStack requires 0 args')
        sys.exit(1)
    pp.pprint(client.startLinStack())

elif cmd == 'stopLinStack':
    if len(args) != 0:
        print('stopLinStack requires 0 args')
        sys.exit(1)
    pp.pprint(client.stopLinStack())

elif cmd == 'setMessageSimulation':
    if len(args) != 1:
        print('setMessageSimulation requires 1 args')
        sys.exit(1)
    pp.pprint(client.setMessageSimulation(eval(args[0]),))

elif cmd == 'setHeaderSimulation':
    if len(args) != 1:
        print('setHeaderSimulation requires 1 args')
        sys.exit(1)
    pp.pprint(client.setHeaderSimulation(eval(args[0]),))

elif cmd == 'setMessageData':
    if len(args) != 1:
        print('setMessageData requires 1 args')
        sys.exit(1)
    pp.pprint(client.setMessageData(eval(args[0]),))

elif cmd == 'getStatus':
    if len(args) != 0:
        print('getStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getStatus())

elif cmd == 'clearSubscribe':
    if len(args) != 0:
        print('clearSubscribe requires 0 args')
        sys.exit(1)
    pp.pprint(client.clearSubscribe())

elif cmd == 'clearSend':
    if len(args) != 1:
        print('clearSend requires 1 args')
        sys.exit(1)
    pp.pprint(client.clearSend(eval(args[0]),))

elif cmd == 'setLinCrcConfig':
    if len(args) != 1:
        print('setLinCrcConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.setLinCrcConfig(eval(args[0]),))

elif cmd == 'clearLinCrcConfig':
    if len(args) != 1:
        print('clearLinCrcConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.clearLinCrcConfig(eval(args[0]),))

elif cmd == 'getDeltaTime':
    if len(args) != 0:
        print('getDeltaTime requires 0 args')
        sys.exit(1)
    pp.pprint(client.getDeltaTime())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
