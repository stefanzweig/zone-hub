#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from LinParserNode import linParserNode
from LinParserNode.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  result addDbfile(filePath req)')
    print('  result setChannelConfig(linChannelConfigs req)')
    print('  result setNodeSimulation(linNodeConfig req)')
    print('  result setFrameSimulation(linFrameConfig req)')
    print('  result setFrameData(linFrameData req)')
    print('  result SetSignalData(linSignalData req)')
    print('  result clearSubscribe()')
    print('  result clearDbfile()')
    print('  linParserStatus getStatus()')
    print('  linLdfJson getLdfJsonTree()')
    print('  result convertLinDbToPy(convertInput req)')
    print('  result convertLinDbToJson(convertInput req)')
    print('  result setCrcConfig(linCrcConfigParser req)')
    print('  result clearCrcConfig(linCrcConfigParser req)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = linParserNode.Client(protocol)
transport.open()

if cmd == 'addDbfile':
    if len(args) != 1:
        print('addDbfile requires 1 args')
        sys.exit(1)
    pp.pprint(client.addDbfile(eval(args[0]),))

elif cmd == 'setChannelConfig':
    if len(args) != 1:
        print('setChannelConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.setChannelConfig(eval(args[0]),))

elif cmd == 'setNodeSimulation':
    if len(args) != 1:
        print('setNodeSimulation requires 1 args')
        sys.exit(1)
    pp.pprint(client.setNodeSimulation(eval(args[0]),))

elif cmd == 'setFrameSimulation':
    if len(args) != 1:
        print('setFrameSimulation requires 1 args')
        sys.exit(1)
    pp.pprint(client.setFrameSimulation(eval(args[0]),))

elif cmd == 'setFrameData':
    if len(args) != 1:
        print('setFrameData requires 1 args')
        sys.exit(1)
    pp.pprint(client.setFrameData(eval(args[0]),))

elif cmd == 'SetSignalData':
    if len(args) != 1:
        print('SetSignalData requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetSignalData(eval(args[0]),))

elif cmd == 'clearSubscribe':
    if len(args) != 0:
        print('clearSubscribe requires 0 args')
        sys.exit(1)
    pp.pprint(client.clearSubscribe())

elif cmd == 'clearDbfile':
    if len(args) != 0:
        print('clearDbfile requires 0 args')
        sys.exit(1)
    pp.pprint(client.clearDbfile())

elif cmd == 'getStatus':
    if len(args) != 0:
        print('getStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getStatus())

elif cmd == 'getLdfJsonTree':
    if len(args) != 0:
        print('getLdfJsonTree requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLdfJsonTree())

elif cmd == 'convertLinDbToPy':
    if len(args) != 1:
        print('convertLinDbToPy requires 1 args')
        sys.exit(1)
    pp.pprint(client.convertLinDbToPy(eval(args[0]),))

elif cmd == 'convertLinDbToJson':
    if len(args) != 1:
        print('convertLinDbToJson requires 1 args')
        sys.exit(1)
    pp.pprint(client.convertLinDbToJson(eval(args[0]),))

elif cmd == 'setCrcConfig':
    if len(args) != 1:
        print('setCrcConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.setCrcConfig(eval(args[0]),))

elif cmd == 'clearCrcConfig':
    if len(args) != 1:
        print('clearCrcConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.clearCrcConfig(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
