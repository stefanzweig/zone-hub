#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import CommonNode.ttypes

from thrift.transport import TTransport
all_structs = []


class someipPackage(object):
    """
    Attributes:
     - serviceName: string
    	SomeIp服务名字
     - srcIp: string
    	SomeIp报文源IP
     - srcPort: int32
    	SomeIp报文源端口
     - destIp: string
    	SomeIp报文目标IP
     - destPort: int32
    	SomeIp报文目标端口
     - interfaceType: string
    	SomeIp报文接口类型，支持method
     - serviceId
     - instanceId
     - interfaceId
     - interfaceName
     - context
     - payload
     - msgType
     - retCode
     - sessionId
     - channel
     - time
     - deltaTime
     - by

    """


    def __init__(self, serviceName=None, srcIp=None, srcPort=None, destIp=None, destPort=None, interfaceType=None, serviceId=None, instanceId=None, interfaceId=None, interfaceName=None, context=None, payload=None, msgType=None, retCode=None, sessionId=None, channel=None, time=None, deltaTime=None, by=None,):
        self.serviceName = serviceName
        self.srcIp = srcIp
        self.srcPort = srcPort
        self.destIp = destIp
        self.destPort = destPort
        self.interfaceType = interfaceType
        self.serviceId = serviceId
        self.instanceId = instanceId
        self.interfaceId = interfaceId
        self.interfaceName = interfaceName
        self.context = context
        self.payload = payload
        self.msgType = msgType
        self.retCode = retCode
        self.sessionId = sessionId
        self.channel = channel
        self.time = time
        self.deltaTime = deltaTime
        self.by = by

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.srcIp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.srcPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.destIp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.destPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.interfaceType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.serviceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.instanceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.interfaceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.interfaceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.context = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.payload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.msgType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.retCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.sessionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I64:
                    self.deltaTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.by = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('someipPackage')
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 1)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.srcIp is not None:
            oprot.writeFieldBegin('srcIp', TType.STRING, 2)
            oprot.writeString(self.srcIp.encode('utf-8') if sys.version_info[0] == 2 else self.srcIp)
            oprot.writeFieldEnd()
        if self.srcPort is not None:
            oprot.writeFieldBegin('srcPort', TType.I32, 3)
            oprot.writeI32(self.srcPort)
            oprot.writeFieldEnd()
        if self.destIp is not None:
            oprot.writeFieldBegin('destIp', TType.STRING, 4)
            oprot.writeString(self.destIp.encode('utf-8') if sys.version_info[0] == 2 else self.destIp)
            oprot.writeFieldEnd()
        if self.destPort is not None:
            oprot.writeFieldBegin('destPort', TType.I32, 5)
            oprot.writeI32(self.destPort)
            oprot.writeFieldEnd()
        if self.interfaceType is not None:
            oprot.writeFieldBegin('interfaceType', TType.STRING, 6)
            oprot.writeString(self.interfaceType.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceType)
            oprot.writeFieldEnd()
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.I32, 7)
            oprot.writeI32(self.serviceId)
            oprot.writeFieldEnd()
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.I32, 8)
            oprot.writeI32(self.instanceId)
            oprot.writeFieldEnd()
        if self.interfaceId is not None:
            oprot.writeFieldBegin('interfaceId', TType.I32, 9)
            oprot.writeI32(self.interfaceId)
            oprot.writeFieldEnd()
        if self.interfaceName is not None:
            oprot.writeFieldBegin('interfaceName', TType.STRING, 10)
            oprot.writeString(self.interfaceName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceName)
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.STRING, 11)
            oprot.writeString(self.context.encode('utf-8') if sys.version_info[0] == 2 else self.context)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 12)
            oprot.writeBinary(self.payload)
            oprot.writeFieldEnd()
        if self.msgType is not None:
            oprot.writeFieldBegin('msgType', TType.I32, 13)
            oprot.writeI32(self.msgType)
            oprot.writeFieldEnd()
        if self.retCode is not None:
            oprot.writeFieldBegin('retCode', TType.I32, 14)
            oprot.writeI32(self.retCode)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.I32, 15)
            oprot.writeI32(self.sessionId)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 16)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 17)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        if self.deltaTime is not None:
            oprot.writeFieldBegin('deltaTime', TType.I64, 18)
            oprot.writeI64(self.deltaTime)
            oprot.writeFieldEnd()
        if self.by is not None:
            oprot.writeFieldBegin('by', TType.STRING, 19)
            oprot.writeString(self.by.encode('utf-8') if sys.version_info[0] == 2 else self.by)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class someipInfo(object):
    """
    Attributes:
     - result
     - jsonStrInfo

    """


    def __init__(self, result=None, jsonStrInfo=None,):
        self.result = result
        self.jsonStrInfo = jsonStrInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jsonStrInfo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('someipInfo')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.jsonStrInfo is not None:
            oprot.writeFieldBegin('jsonStrInfo', TType.STRING, 2)
            oprot.writeString(self.jsonStrInfo.encode('utf-8') if sys.version_info[0] == 2 else self.jsonStrInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceTag(object):
    """
    Attributes:
     - serviceName: string
    	服务的名字
     - instanceId: int32
    	服务的instance Id
     - serviceType: string
    	可以是 'consumer'|'provider' 表示该服务设置为什么类型
     - serviceState: bool
    	默认值是True，用户可以不用填，如果需要停止服务，该参数赋值False
     - channel: int32
    	该服务的通道
     - useType: int32
    	调用的途径，1:脚本调用|2:GUI调用
     - serviceId: int32
    	服务的ID

    """


    def __init__(self, serviceName=None, instanceId=None, serviceType=None, serviceState=True, channel=1, useType=1, serviceId=None,):
        self.serviceName = serviceName
        self.instanceId = instanceId
        self.serviceType = serviceType
        self.serviceState = serviceState
        self.channel = channel
        self.useType = useType
        self.serviceId = serviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.instanceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.serviceType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.serviceState = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.useType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.serviceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('serviceTag')
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 1)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.I32, 2)
            oprot.writeI32(self.instanceId)
            oprot.writeFieldEnd()
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.STRING, 3)
            oprot.writeString(self.serviceType.encode('utf-8') if sys.version_info[0] == 2 else self.serviceType)
            oprot.writeFieldEnd()
        if self.serviceState is not None:
            oprot.writeFieldBegin('serviceState', TType.BOOL, 4)
            oprot.writeBool(self.serviceState)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 5)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.useType is not None:
            oprot.writeFieldBegin('useType', TType.I32, 6)
            oprot.writeI32(self.useType)
            oprot.writeFieldEnd()
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.I32, 7)
            oprot.writeI32(self.serviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class someipCallContext(object):
    """
    Attributes:
     - timeout
     - strContext
     - channel

    """


    def __init__(self, timeout=None, strContext=None, channel=None,):
        self.timeout = timeout
        self.strContext = strContext
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.strContext = someipPackage()
                    self.strContext.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('someipCallContext')
        if self.strContext is not None:
            oprot.writeFieldBegin('strContext', TType.STRUCT, 1)
            self.strContext.write(oprot)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 2)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 3)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class someipResponseContext(object):
    """
    Attributes:
     - result
     - strContext

    """


    def __init__(self, result=None, strContext=None,):
        self.result = result
        self.strContext = strContext

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.strContext = someipPackage()
                    self.strContext.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('someipResponseContext')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.strContext is not None:
            oprot.writeFieldBegin('strContext', TType.STRUCT, 2)
            self.strContext.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class someipServiceInfo(object):
    """
    Attributes:
     - serviceName: string
    	SomeIp服务名字
     - serviceId: int64
    	SomeIp服务ID
     - instanceId: int32
    	SomeIp服务InstanceID
     - srcIp: string
    	SomeIp服务源IP地址

    """


    def __init__(self, serviceName=None, serviceId=None, instanceId=None, srcIp=None,):
        self.serviceName = serviceName
        self.serviceId = serviceId
        self.instanceId = instanceId
        self.srcIp = srcIp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.serviceId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.instanceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.srcIp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('someipServiceInfo')
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 1)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.I64, 2)
            oprot.writeI64(self.serviceId)
            oprot.writeFieldEnd()
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.I32, 3)
            oprot.writeI32(self.instanceId)
            oprot.writeFieldEnd()
        if self.srcIp is not None:
            oprot.writeFieldBegin('srcIp', TType.STRING, 4)
            oprot.writeString(self.srcIp.encode('utf-8') if sys.version_info[0] == 2 else self.srcIp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class someipServiceInfos(object):
    """
    Attributes:
     - result: result类
    	请求返回结果
     - infos: list[someipServiceInfo]
    	返回所有服务信息，具体信息查看someipServiceInfo类

    """


    def __init__(self, result=None, infos=None,):
        self.result = result
        self.infos = infos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.infos = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = someipServiceInfo()
                        _elem5.read(iprot)
                        self.infos.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('someipServiceInfos')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.infos is not None:
            oprot.writeFieldBegin('infos', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.infos))
            for iter6 in self.infos:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class someipArxmlJson(object):
    """
    Attributes:
     - result: int32
    	执行结果状态值,0是成功，非0失败
     - reason: string
    	执行失败原因描述
     - jsonData: string
    	执行成功后arxml json数据，该值需要使用json.loads转化成字典

    """


    def __init__(self, result=None, reason=None, jsonData=None,):
        self.result = result
        self.reason = reason
        self.jsonData = jsonData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.jsonData = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('someipArxmlJson')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        if self.jsonData is not None:
            oprot.writeFieldBegin('jsonData', TType.STRING, 3)
            oprot.writeString(self.jsonData.encode('utf-8') if sys.version_info[0] == 2 else self.jsonData)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class convertInput(object):
    """
    Attributes:
     - srcFile
     - dstFile

    """


    def __init__(self, srcFile=None, dstFile=None,):
        self.srcFile = srcFile
        self.dstFile = dstFile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.srcFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dstFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('convertInput')
        if self.srcFile is not None:
            oprot.writeFieldBegin('srcFile', TType.STRING, 1)
            oprot.writeString(self.srcFile.encode('utf-8') if sys.version_info[0] == 2 else self.srcFile)
            oprot.writeFieldEnd()
        if self.dstFile is not None:
            oprot.writeFieldBegin('dstFile', TType.STRING, 2)
            oprot.writeString(self.dstFile.encode('utf-8') if sys.version_info[0] == 2 else self.dstFile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceState(object):
    """
    Attributes:
     - serviceName
     - serviceId
     - instanceId
     - serviceState
     - serviceSide
     - channel

    """


    def __init__(self, serviceName=None, serviceId=None, instanceId=None, serviceState=None, serviceSide=None, channel=None,):
        self.serviceName = serviceName
        self.serviceId = serviceId
        self.instanceId = instanceId
        self.serviceState = serviceState
        self.serviceSide = serviceSide
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.serviceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.instanceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.serviceState = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.serviceSide = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('serviceState')
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 1)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.I32, 2)
            oprot.writeI32(self.serviceId)
            oprot.writeFieldEnd()
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.I32, 3)
            oprot.writeI32(self.instanceId)
            oprot.writeFieldEnd()
        if self.serviceState is not None:
            oprot.writeFieldBegin('serviceState', TType.BOOL, 4)
            oprot.writeBool(self.serviceState)
            oprot.writeFieldEnd()
        if self.serviceSide is not None:
            oprot.writeFieldBegin('serviceSide', TType.STRING, 5)
            oprot.writeString(self.serviceSide.encode('utf-8') if sys.version_info[0] == 2 else self.serviceSide)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 6)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceStates(object):
    """
    Attributes:
     - result
     - serviceStates

    """


    def __init__(self, result=None, serviceStates=None,):
        self.result = result
        self.serviceStates = serviceStates

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.serviceStates = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = serviceState()
                        _elem12.read(iprot)
                        self.serviceStates.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('serviceStates')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.serviceStates is not None:
            oprot.writeFieldBegin('serviceStates', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.serviceStates))
            for iter13 in self.serviceStates:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class someipChannelConfig(object):
    """
    Attributes:
     - netInfo
     - arxmlPaths
     - ethDevice

    """


    def __init__(self, netInfo=None, arxmlPaths=None, ethDevice=None,):
        self.netInfo = netInfo
        self.arxmlPaths = arxmlPaths
        self.ethDevice = ethDevice

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.netInfo = CommonNode.ttypes.netInfo()
                    self.netInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.arxmlPaths = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.arxmlPaths.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.ethDevice = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('someipChannelConfig')
        if self.netInfo is not None:
            oprot.writeFieldBegin('netInfo', TType.STRUCT, 1)
            self.netInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.arxmlPaths is not None:
            oprot.writeFieldBegin('arxmlPaths', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.arxmlPaths))
            for iter20 in self.arxmlPaths:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ethDevice is not None:
            oprot.writeFieldBegin('ethDevice', TType.I32, 3)
            oprot.writeI32(self.ethDevice)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class someipStackConfig(object):
    """
    Attributes:
     - result
     - configs
     - arpPairs

    """


    def __init__(self, result=None, configs=None, arpPairs=None,):
        self.result = result
        self.configs = configs
        self.arpPairs = arpPairs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.configs = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = someipChannelConfig()
                        _elem26.read(iprot)
                        self.configs.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.arpPairs = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = CommonNode.ttypes.arpPair()
                        _elem32.read(iprot)
                        self.arpPairs.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('someipStackConfig')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.configs is not None:
            oprot.writeFieldBegin('configs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.configs))
            for iter33 in self.configs:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.arpPairs is not None:
            oprot.writeFieldBegin('arpPairs', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.arpPairs))
            for iter34 in self.arpPairs:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class logRequest(object):
    """
    Attributes:
     - netInfo
     - path

    """


    def __init__(self, netInfo=None, path=None,):
        self.netInfo = netInfo
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.netInfo = CommonNode.ttypes.netInfo()
                    self.netInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.path = CommonNode.ttypes.folderFilePath()
                    self.path.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logRequest')
        if self.netInfo is not None:
            oprot.writeFieldBegin('netInfo', TType.STRUCT, 1)
            self.netInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRUCT, 2)
            self.path.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class addSomeipArxmlRequest(object):
    """
    Attributes:
     - filePath
     - channel

    """


    def __init__(self, filePath=None, channel=None,):
        self.filePath = filePath
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.filePath = CommonNode.ttypes.filePath()
                    self.filePath.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('addSomeipArxmlRequest')
        if self.filePath is not None:
            oprot.writeFieldBegin('filePath', TType.STRUCT, 1)
            self.filePath.write(oprot)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 2)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(someipPackage)
someipPackage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'srcIp', 'UTF8', None, ),  # 2
    (3, TType.I32, 'srcPort', None, None, ),  # 3
    (4, TType.STRING, 'destIp', 'UTF8', None, ),  # 4
    (5, TType.I32, 'destPort', None, None, ),  # 5
    (6, TType.STRING, 'interfaceType', 'UTF8', None, ),  # 6
    (7, TType.I32, 'serviceId', None, None, ),  # 7
    (8, TType.I32, 'instanceId', None, None, ),  # 8
    (9, TType.I32, 'interfaceId', None, None, ),  # 9
    (10, TType.STRING, 'interfaceName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'context', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'payload', 'BINARY', None, ),  # 12
    (13, TType.I32, 'msgType', None, None, ),  # 13
    (14, TType.I32, 'retCode', None, None, ),  # 14
    (15, TType.I32, 'sessionId', None, None, ),  # 15
    (16, TType.I32, 'channel', None, None, ),  # 16
    (17, TType.I64, 'time', None, None, ),  # 17
    (18, TType.I64, 'deltaTime', None, None, ),  # 18
    (19, TType.STRING, 'by', 'UTF8', None, ),  # 19
)
all_structs.append(someipInfo)
someipInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode.ttypes.result, None], None, ),  # 1
    (2, TType.STRING, 'jsonStrInfo', 'UTF8', None, ),  # 2
)
all_structs.append(serviceTag)
serviceTag.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'instanceId', None, None, ),  # 2
    (3, TType.STRING, 'serviceType', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'serviceState', None, True, ),  # 4
    (5, TType.I32, 'channel', None, 1, ),  # 5
    (6, TType.I32, 'useType', None, 1, ),  # 6
    (7, TType.I32, 'serviceId', None, None, ),  # 7
)
all_structs.append(someipCallContext)
someipCallContext.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'strContext', [someipPackage, None], None, ),  # 1
    (2, TType.I32, 'timeout', None, None, ),  # 2
    (3, TType.I32, 'channel', None, None, ),  # 3
)
all_structs.append(someipResponseContext)
someipResponseContext.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode.ttypes.result, None], None, ),  # 1
    (2, TType.STRUCT, 'strContext', [someipPackage, None], None, ),  # 2
)
all_structs.append(someipServiceInfo)
someipServiceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceName', 'UTF8', None, ),  # 1
    (2, TType.I64, 'serviceId', None, None, ),  # 2
    (3, TType.I32, 'instanceId', None, None, ),  # 3
    (4, TType.STRING, 'srcIp', 'UTF8', None, ),  # 4
)
all_structs.append(someipServiceInfos)
someipServiceInfos.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode.ttypes.result, None], None, ),  # 1
    (2, TType.LIST, 'infos', (TType.STRUCT, [someipServiceInfo, None], False), None, ),  # 2
)
all_structs.append(someipArxmlJson)
someipArxmlJson.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.STRING, 'reason', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'jsonData', 'UTF8', None, ),  # 3
)
all_structs.append(convertInput)
convertInput.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'srcFile', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dstFile', 'UTF8', None, ),  # 2
)
all_structs.append(serviceState)
serviceState.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'serviceId', None, None, ),  # 2
    (3, TType.I32, 'instanceId', None, None, ),  # 3
    (4, TType.BOOL, 'serviceState', None, None, ),  # 4
    (5, TType.STRING, 'serviceSide', 'UTF8', None, ),  # 5
    (6, TType.I32, 'channel', None, None, ),  # 6
)
all_structs.append(serviceStates)
serviceStates.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode.ttypes.result, None], None, ),  # 1
    (2, TType.LIST, 'serviceStates', (TType.STRUCT, [serviceState, None], False), None, ),  # 2
)
all_structs.append(someipChannelConfig)
someipChannelConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'netInfo', [CommonNode.ttypes.netInfo, None], None, ),  # 1
    (2, TType.LIST, 'arxmlPaths', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'ethDevice', None, None, ),  # 3
)
all_structs.append(someipStackConfig)
someipStackConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode.ttypes.result, None], None, ),  # 1
    (2, TType.LIST, 'configs', (TType.STRUCT, [someipChannelConfig, None], False), None, ),  # 2
    (3, TType.LIST, 'arpPairs', (TType.STRUCT, [CommonNode.ttypes.arpPair, None], False), None, ),  # 3
)
all_structs.append(logRequest)
logRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'netInfo', [CommonNode.ttypes.netInfo, None], None, ),  # 1
    (2, TType.STRUCT, 'path', [CommonNode.ttypes.folderFilePath, None], None, ),  # 2
)
all_structs.append(addSomeipArxmlRequest)
addSomeipArxmlRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'filePath', [CommonNode.ttypes.filePath, None], None, ),  # 1
    (2, TType.I32, 'channel', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
