#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from SomeIpNode import someIpNode
from SomeIpNode.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  result startSomeIpStack(netInfo req)')
    print('  result startSomeIpStackBypass(empty req)')
    print('  result stopSomeIpStack(netInfo req)')
    print('  result stopSomeIpStackBypass(empty req)')
    print('  result addSomeIpArxml(addSomeipArxmlRequest req)')
    print('  result addIfaceInfo(netInfo req)')
    print('  netInfo getIfaceInfo(netInfo req)')
    print('  someipArxmlJson getArxmlToJson(netInfo req)')
    print('  result updateSomeipServiceConfig(serviceTag req)')
    print('  result reset()')
    print('  someipResponseContext someipCallSync(someipCallContext req)')
    print('  result getSomeipStackStatus(netInfo req)')
    print('  someipStackConfig getAllSomeipStackConfig(empty req)')
    print('  someipServiceInfos getAllOfferService(netInfo req)')
    print('  serviceStates getServiceStates(netInfo req)')
    print('  result startLog(logRequest req)')
    print('  result stopLog(logRequest req)')
    print('  result getLogStatus(logRequest req)')
    print('  result convertSomeipDbToJson(convertInput req)')
    print('  result convertSomeipDbToPy(convertInput req)')
    print('  result setAllSomeipStackConfig(someipStackConfig req)')
    print('  result someipPublish(someipPackage req)')
    print('  result someipSetDefaultAnswer(someipPackage req)')
    print('  result someipCallAsync(someipPackage req)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = someIpNode.Client(protocol)
transport.open()

if cmd == 'startSomeIpStack':
    if len(args) != 1:
        print('startSomeIpStack requires 1 args')
        sys.exit(1)
    pp.pprint(client.startSomeIpStack(eval(args[0]),))

elif cmd == 'startSomeIpStackBypass':
    if len(args) != 1:
        print('startSomeIpStackBypass requires 1 args')
        sys.exit(1)
    pp.pprint(client.startSomeIpStackBypass(eval(args[0]),))

elif cmd == 'stopSomeIpStack':
    if len(args) != 1:
        print('stopSomeIpStack requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopSomeIpStack(eval(args[0]),))

elif cmd == 'stopSomeIpStackBypass':
    if len(args) != 1:
        print('stopSomeIpStackBypass requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopSomeIpStackBypass(eval(args[0]),))

elif cmd == 'addSomeIpArxml':
    if len(args) != 1:
        print('addSomeIpArxml requires 1 args')
        sys.exit(1)
    pp.pprint(client.addSomeIpArxml(eval(args[0]),))

elif cmd == 'addIfaceInfo':
    if len(args) != 1:
        print('addIfaceInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.addIfaceInfo(eval(args[0]),))

elif cmd == 'getIfaceInfo':
    if len(args) != 1:
        print('getIfaceInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getIfaceInfo(eval(args[0]),))

elif cmd == 'getArxmlToJson':
    if len(args) != 1:
        print('getArxmlToJson requires 1 args')
        sys.exit(1)
    pp.pprint(client.getArxmlToJson(eval(args[0]),))

elif cmd == 'updateSomeipServiceConfig':
    if len(args) != 1:
        print('updateSomeipServiceConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateSomeipServiceConfig(eval(args[0]),))

elif cmd == 'reset':
    if len(args) != 0:
        print('reset requires 0 args')
        sys.exit(1)
    pp.pprint(client.reset())

elif cmd == 'someipCallSync':
    if len(args) != 1:
        print('someipCallSync requires 1 args')
        sys.exit(1)
    pp.pprint(client.someipCallSync(eval(args[0]),))

elif cmd == 'getSomeipStackStatus':
    if len(args) != 1:
        print('getSomeipStackStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSomeipStackStatus(eval(args[0]),))

elif cmd == 'getAllSomeipStackConfig':
    if len(args) != 1:
        print('getAllSomeipStackConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllSomeipStackConfig(eval(args[0]),))

elif cmd == 'getAllOfferService':
    if len(args) != 1:
        print('getAllOfferService requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllOfferService(eval(args[0]),))

elif cmd == 'getServiceStates':
    if len(args) != 1:
        print('getServiceStates requires 1 args')
        sys.exit(1)
    pp.pprint(client.getServiceStates(eval(args[0]),))

elif cmd == 'startLog':
    if len(args) != 1:
        print('startLog requires 1 args')
        sys.exit(1)
    pp.pprint(client.startLog(eval(args[0]),))

elif cmd == 'stopLog':
    if len(args) != 1:
        print('stopLog requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopLog(eval(args[0]),))

elif cmd == 'getLogStatus':
    if len(args) != 1:
        print('getLogStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.getLogStatus(eval(args[0]),))

elif cmd == 'convertSomeipDbToJson':
    if len(args) != 1:
        print('convertSomeipDbToJson requires 1 args')
        sys.exit(1)
    pp.pprint(client.convertSomeipDbToJson(eval(args[0]),))

elif cmd == 'convertSomeipDbToPy':
    if len(args) != 1:
        print('convertSomeipDbToPy requires 1 args')
        sys.exit(1)
    pp.pprint(client.convertSomeipDbToPy(eval(args[0]),))

elif cmd == 'setAllSomeipStackConfig':
    if len(args) != 1:
        print('setAllSomeipStackConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.setAllSomeipStackConfig(eval(args[0]),))

elif cmd == 'someipPublish':
    if len(args) != 1:
        print('someipPublish requires 1 args')
        sys.exit(1)
    pp.pprint(client.someipPublish(eval(args[0]),))

elif cmd == 'someipSetDefaultAnswer':
    if len(args) != 1:
        print('someipSetDefaultAnswer requires 1 args')
        sys.exit(1)
    pp.pprint(client.someipSetDefaultAnswer(eval(args[0]),))

elif cmd == 'someipCallAsync':
    if len(args) != 1:
        print('someipCallAsync requires 1 args')
        sys.exit(1)
    pp.pprint(client.someipCallAsync(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
