#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from CanParserNode import canParserNode
from CanParserNode.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  result setCrcRcConfig(pduCrcRcConfig req)')
    print('  result clearAllCrcRcConfig()')
    print('  result clearCrcRcConfig(pduCrcRcConfig req)')
    print('  result sendCanFrameCyc(canMessage req)')
    print('  result sendCanPduCyc(pduMessage req)')
    print('  result sendCanPduCycList(pduMessages req)')
    print('  result sendCanPdu(pduMessage req)')
    print('  result addDbFile(dbPath req)')
    print('  result setConfig(dbConfigs req)')
    print('  dbConfigs getCanDbConfigs()')
    print('  dbPath getCanDbPath()')
    print('  result subscribeMsg(subscribeInfo req)')
    print('  result unSubscribeMsg(subscribeInfo req)')
    print('  canDbInfo getCanDbInfo()')
    print('  result clear()')
    print('  result clearSubscribe()')
    print('  iSignalIPduEncode encodePdu(iSignalIPduObj req)')
    print('  result convertCanDbToPy(convertInput req)')
    print('  result convertCanDbToJson(convertInput req)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = canParserNode.Client(protocol)
transport.open()

if cmd == 'setCrcRcConfig':
    if len(args) != 1:
        print('setCrcRcConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.setCrcRcConfig(eval(args[0]),))

elif cmd == 'clearAllCrcRcConfig':
    if len(args) != 0:
        print('clearAllCrcRcConfig requires 0 args')
        sys.exit(1)
    pp.pprint(client.clearAllCrcRcConfig())

elif cmd == 'clearCrcRcConfig':
    if len(args) != 1:
        print('clearCrcRcConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.clearCrcRcConfig(eval(args[0]),))

elif cmd == 'sendCanFrameCyc':
    if len(args) != 1:
        print('sendCanFrameCyc requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendCanFrameCyc(eval(args[0]),))

elif cmd == 'sendCanPduCyc':
    if len(args) != 1:
        print('sendCanPduCyc requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendCanPduCyc(eval(args[0]),))

elif cmd == 'sendCanPduCycList':
    if len(args) != 1:
        print('sendCanPduCycList requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendCanPduCycList(eval(args[0]),))

elif cmd == 'sendCanPdu':
    if len(args) != 1:
        print('sendCanPdu requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendCanPdu(eval(args[0]),))

elif cmd == 'addDbFile':
    if len(args) != 1:
        print('addDbFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.addDbFile(eval(args[0]),))

elif cmd == 'setConfig':
    if len(args) != 1:
        print('setConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.setConfig(eval(args[0]),))

elif cmd == 'getCanDbConfigs':
    if len(args) != 0:
        print('getCanDbConfigs requires 0 args')
        sys.exit(1)
    pp.pprint(client.getCanDbConfigs())

elif cmd == 'getCanDbPath':
    if len(args) != 0:
        print('getCanDbPath requires 0 args')
        sys.exit(1)
    pp.pprint(client.getCanDbPath())

elif cmd == 'subscribeMsg':
    if len(args) != 1:
        print('subscribeMsg requires 1 args')
        sys.exit(1)
    pp.pprint(client.subscribeMsg(eval(args[0]),))

elif cmd == 'unSubscribeMsg':
    if len(args) != 1:
        print('unSubscribeMsg requires 1 args')
        sys.exit(1)
    pp.pprint(client.unSubscribeMsg(eval(args[0]),))

elif cmd == 'getCanDbInfo':
    if len(args) != 0:
        print('getCanDbInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.getCanDbInfo())

elif cmd == 'clear':
    if len(args) != 0:
        print('clear requires 0 args')
        sys.exit(1)
    pp.pprint(client.clear())

elif cmd == 'clearSubscribe':
    if len(args) != 0:
        print('clearSubscribe requires 0 args')
        sys.exit(1)
    pp.pprint(client.clearSubscribe())

elif cmd == 'encodePdu':
    if len(args) != 1:
        print('encodePdu requires 1 args')
        sys.exit(1)
    pp.pprint(client.encodePdu(eval(args[0]),))

elif cmd == 'convertCanDbToPy':
    if len(args) != 1:
        print('convertCanDbToPy requires 1 args')
        sys.exit(1)
    pp.pprint(client.convertCanDbToPy(eval(args[0]),))

elif cmd == 'convertCanDbToJson':
    if len(args) != 1:
        print('convertCanDbToJson requires 1 args')
        sys.exit(1)
    pp.pprint(client.convertCanDbToJson(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
