#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes
import CanStackNode.ttypes

from thrift.transport import TTransport
all_structs = []


class pduCrcRcConfig(object):
    """
    Attributes:
     - channel
     - pduName
     - crcBitStarts
     - rcBitStarts
     - crcTable
     - crcName
     - rcName
     - rcConfig

    """


    def __init__(self, channel=None, pduName=None, crcBitStarts=None, rcBitStarts=None, crcTable=None, crcName=None, rcName=None, rcConfig=None,):
        self.channel = channel
        self.pduName = pduName
        self.crcBitStarts = crcBitStarts
        self.rcBitStarts = rcBitStarts
        self.crcTable = crcTable
        self.crcName = crcName
        self.rcName = rcName
        self.rcConfig = rcConfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pduName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.crcBitStarts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.rcBitStarts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.crcTable = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.crcTable.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.crcName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.rcName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.rcConfig = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.rcConfig.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pduCrcRcConfig')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.pduName is not None:
            oprot.writeFieldBegin('pduName', TType.STRING, 2)
            oprot.writeString(self.pduName.encode('utf-8') if sys.version_info[0] == 2 else self.pduName)
            oprot.writeFieldEnd()
        if self.crcBitStarts is not None:
            oprot.writeFieldBegin('crcBitStarts', TType.I32, 3)
            oprot.writeI32(self.crcBitStarts)
            oprot.writeFieldEnd()
        if self.rcBitStarts is not None:
            oprot.writeFieldBegin('rcBitStarts', TType.I32, 5)
            oprot.writeI32(self.rcBitStarts)
            oprot.writeFieldEnd()
        if self.crcTable is not None:
            oprot.writeFieldBegin('crcTable', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.crcTable))
            for iter12 in self.crcTable:
                oprot.writeI32(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.crcName is not None:
            oprot.writeFieldBegin('crcName', TType.STRING, 8)
            oprot.writeString(self.crcName.encode('utf-8') if sys.version_info[0] == 2 else self.crcName)
            oprot.writeFieldEnd()
        if self.rcName is not None:
            oprot.writeFieldBegin('rcName', TType.STRING, 9)
            oprot.writeString(self.rcName.encode('utf-8') if sys.version_info[0] == 2 else self.rcName)
            oprot.writeFieldEnd()
        if self.rcConfig is not None:
            oprot.writeFieldBegin('rcConfig', TType.LIST, 10)
            oprot.writeListBegin(TType.I32, len(self.rcConfig))
            for iter13 in self.rcConfig:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pduMessage(object):
    """
    Attributes:
     - channel
     - pduName
     - period
     - data
     - updateBy
     - context
     - times
     - context_raw
     - padding_bit_list

    """


    def __init__(self, channel=None, pduName=None, period=None, data=None, updateBy=None, context=None, times=None, context_raw=None, padding_bit_list=None,):
        self.channel = channel
        self.pduName = pduName
        self.period = period
        self.data = data
        self.updateBy = updateBy
        self.context = context
        self.times = times
        self.context_raw = context_raw
        self.padding_bit_list = padding_bit_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pduName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.period = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI32()
                        self.data.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.updateBy = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.context = {}
                    (_ktype21, _vtype22, _size20) = iprot.readMapBegin()
                    for _i24 in range(_size20):
                        _key25 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val26 = iprot.readI32()
                        self.context[_key25] = _val26
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.times = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.context_raw = {}
                    (_ktype28, _vtype29, _size27) = iprot.readMapBegin()
                    for _i31 in range(_size27):
                        _key32 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val33 = iprot.readI32()
                        self.context_raw[_key32] = _val33
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.padding_bit_list = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = []
                        (_etype43, _size40) = iprot.readListBegin()
                        for _i44 in range(_size40):
                            _elem45 = iprot.readI32()
                            _elem39.append(_elem45)
                        iprot.readListEnd()
                        self.padding_bit_list.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pduMessage')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.pduName is not None:
            oprot.writeFieldBegin('pduName', TType.STRING, 2)
            oprot.writeString(self.pduName.encode('utf-8') if sys.version_info[0] == 2 else self.pduName)
            oprot.writeFieldEnd()
        if self.period is not None:
            oprot.writeFieldBegin('period', TType.I32, 3)
            oprot.writeI32(self.period)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.data))
            for iter46 in self.data:
                oprot.writeI32(iter46)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.updateBy is not None:
            oprot.writeFieldBegin('updateBy', TType.STRING, 5)
            oprot.writeString(self.updateBy.encode('utf-8') if sys.version_info[0] == 2 else self.updateBy)
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.context))
            for kiter47, viter48 in self.context.items():
                oprot.writeString(kiter47.encode('utf-8') if sys.version_info[0] == 2 else kiter47)
                oprot.writeI32(viter48)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.times is not None:
            oprot.writeFieldBegin('times', TType.I32, 7)
            oprot.writeI32(self.times)
            oprot.writeFieldEnd()
        if self.context_raw is not None:
            oprot.writeFieldBegin('context_raw', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.context_raw))
            for kiter49, viter50 in self.context_raw.items():
                oprot.writeString(kiter49.encode('utf-8') if sys.version_info[0] == 2 else kiter49)
                oprot.writeI32(viter50)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.padding_bit_list is not None:
            oprot.writeFieldBegin('padding_bit_list', TType.LIST, 9)
            oprot.writeListBegin(TType.LIST, len(self.padding_bit_list))
            for iter51 in self.padding_bit_list:
                oprot.writeListBegin(TType.I32, len(iter51))
                for iter52 in iter51:
                    oprot.writeI32(iter52)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pduMessages(object):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.message = []
                    (_etype56, _size53) = iprot.readListBegin()
                    for _i57 in range(_size53):
                        _elem58 = pduMessage()
                        _elem58.read(iprot)
                        self.message.append(_elem58)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pduMessages')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.message))
            for iter59 in self.message:
                iter59.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class subscribeInfo(object):
    """
    Attributes:
     - channel
     - name
     - type

    """


    def __init__(self, channel=None, name=None, type=None,):
        self.channel = channel
        self.name = name
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('subscribeInfo')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dbPath(object):
    """
    Attributes:
     - result
     - dbPath

    """


    def __init__(self, result=None, dbPath=None,):
        self.result = result
        self.dbPath = dbPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = Common.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dbPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dbPath')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.dbPath is not None:
            oprot.writeFieldBegin('dbPath', TType.STRING, 2)
            oprot.writeString(self.dbPath.encode('utf-8') if sys.version_info[0] == 2 else self.dbPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dbConfigs(object):
    """
    Attributes:
     - result
     - configs

    """


    def __init__(self, result=None, configs=None,):
        self.result = result
        self.configs = configs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = Common.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.configs = []
                    (_etype63, _size60) = iprot.readListBegin()
                    for _i64 in range(_size60):
                        _elem65 = dbConfigPair()
                        _elem65.read(iprot)
                        self.configs.append(_elem65)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dbConfigs')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.configs is not None:
            oprot.writeFieldBegin('configs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.configs))
            for iter66 in self.configs:
                iter66.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dbConfigPair(object):
    """
    Attributes:
     - channel
     - dbName

    """


    def __init__(self, channel=None, dbName=None,):
        self.channel = channel
        self.dbName = dbName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dbName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dbConfigPair')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.dbName is not None:
            oprot.writeFieldBegin('dbName', TType.STRING, 2)
            oprot.writeString(self.dbName.encode('utf-8') if sys.version_info[0] == 2 else self.dbName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class canDbInfo(object):
    """
    Attributes:
     - result
     - strJson

    """


    def __init__(self, result=None, strJson=None,):
        self.result = result
        self.strJson = strJson

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = Common.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.strJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('canDbInfo')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.strJson is not None:
            oprot.writeFieldBegin('strJson', TType.STRING, 2)
            oprot.writeString(self.strJson.encode('utf-8') if sys.version_info[0] == 2 else self.strJson)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class iSignalIPduObj(object):
    """
    Attributes:
     - channel
     - pduName
     - pduContext

    """


    def __init__(self, channel=None, pduName=None, pduContext=None,):
        self.channel = channel
        self.pduName = pduName
        self.pduContext = pduContext

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pduName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pduContext = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('iSignalIPduObj')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.pduName is not None:
            oprot.writeFieldBegin('pduName', TType.STRING, 2)
            oprot.writeString(self.pduName.encode('utf-8') if sys.version_info[0] == 2 else self.pduName)
            oprot.writeFieldEnd()
        if self.pduContext is not None:
            oprot.writeFieldBegin('pduContext', TType.STRING, 3)
            oprot.writeString(self.pduContext.encode('utf-8') if sys.version_info[0] == 2 else self.pduContext)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class iSignalIPduEncode(object):
    """
    Attributes:
     - result
     - length
     - data

    """


    def __init__(self, result=None, length=None, data=None,):
        self.result = result
        self.length = length
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = Common.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype70, _size67) = iprot.readListBegin()
                    for _i71 in range(_size67):
                        _elem72 = iprot.readI32()
                        self.data.append(_elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('iSignalIPduEncode')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I32, 2)
            oprot.writeI32(self.length)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.data))
            for iter73 in self.data:
                oprot.writeI32(iter73)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class convertInput(object):
    """
    Attributes:
     - srcFile
     - dstFile

    """


    def __init__(self, srcFile=None, dstFile=None,):
        self.srcFile = srcFile
        self.dstFile = dstFile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.srcFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dstFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('convertInput')
        if self.srcFile is not None:
            oprot.writeFieldBegin('srcFile', TType.STRING, 1)
            oprot.writeString(self.srcFile.encode('utf-8') if sys.version_info[0] == 2 else self.srcFile)
            oprot.writeFieldEnd()
        if self.dstFile is not None:
            oprot.writeFieldBegin('dstFile', TType.STRING, 2)
            oprot.writeString(self.dstFile.encode('utf-8') if sys.version_info[0] == 2 else self.dstFile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(pduCrcRcConfig)
pduCrcRcConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'pduName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'crcBitStarts', None, None, ),  # 3
    None,  # 4
    (5, TType.I32, 'rcBitStarts', None, None, ),  # 5
    None,  # 6
    (7, TType.LIST, 'crcTable', (TType.I32, None, False), None, ),  # 7
    (8, TType.STRING, 'crcName', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'rcName', 'UTF8', None, ),  # 9
    (10, TType.LIST, 'rcConfig', (TType.I32, None, False), None, ),  # 10
)
all_structs.append(pduMessage)
pduMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'pduName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'period', None, None, ),  # 3
    (4, TType.LIST, 'data', (TType.I32, None, False), None, ),  # 4
    (5, TType.STRING, 'updateBy', 'UTF8', None, ),  # 5
    (6, TType.MAP, 'context', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 6
    (7, TType.I32, 'times', None, None, ),  # 7
    (8, TType.MAP, 'context_raw', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 8
    (9, TType.LIST, 'padding_bit_list', (TType.LIST, (TType.I32, None, False), False), None, ),  # 9
)
all_structs.append(pduMessages)
pduMessages.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'message', (TType.STRUCT, [pduMessage, None], False), None, ),  # 1
)
all_structs.append(subscribeInfo)
subscribeInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
)
all_structs.append(dbPath)
dbPath.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [Common.ttypes.result, None], None, ),  # 1
    (2, TType.STRING, 'dbPath', 'UTF8', None, ),  # 2
)
all_structs.append(dbConfigs)
dbConfigs.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [Common.ttypes.result, None], None, ),  # 1
    (2, TType.LIST, 'configs', (TType.STRUCT, [dbConfigPair, None], False), None, ),  # 2
)
all_structs.append(dbConfigPair)
dbConfigPair.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
)
all_structs.append(canDbInfo)
canDbInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [Common.ttypes.result, None], None, ),  # 1
    (2, TType.STRING, 'strJson', 'UTF8', None, ),  # 2
)
all_structs.append(iSignalIPduObj)
iSignalIPduObj.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'pduName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'pduContext', 'UTF8', None, ),  # 3
)
all_structs.append(iSignalIPduEncode)
iSignalIPduEncode.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [Common.ttypes.result, None], None, ),  # 1
    (2, TType.I32, 'length', None, None, ),  # 2
    (3, TType.LIST, 'data', (TType.I32, None, False), None, ),  # 3
)
all_structs.append(convertInput)
convertInput.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'srcFile', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dstFile', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
