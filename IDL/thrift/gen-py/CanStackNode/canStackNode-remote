#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from CanStackNode import canStackNode
from CanStackNode.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  version getVersion()')
    print('  result setConfigs(canChannelConfigs req)')
    print('  result startCanStack()')
    print('  result stopCanStack()')
    print('  result clearSend()')
    print('  result setCrcRcConfig(frameCrcRcConfig req)')
    print('  result clearCrcRcConfig(frameCrcRcConfig req)')
    print('  result clearAllCrcRcConfig()')
    print('  result sendCanMessageCycList(canMessages req)')
    print('  result sendCanMessageCyc(canMessage req)')
    print('  result sendCanMessage(canMessages req)')
    print('  result creatTimerEvent(timer req)')
    print('  result getStackStatus()')
    print('  result stopChannelSendCyc(channel req)')
    print('  result sendCan(canMessage req)')
    print('  busload getChannelBusloadCurrent(channel req)')
    print('  busload getChannelBusloadMax(channel req)')
    print('  busload getChannelBusloadAvg(channel req)')
    print('  errorFrameTotal getChannelErrorFrameTotal(channel req)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = canStackNode.Client(protocol)
transport.open()

if cmd == 'getVersion':
    if len(args) != 0:
        print('getVersion requires 0 args')
        sys.exit(1)
    pp.pprint(client.getVersion())

elif cmd == 'setConfigs':
    if len(args) != 1:
        print('setConfigs requires 1 args')
        sys.exit(1)
    pp.pprint(client.setConfigs(eval(args[0]),))

elif cmd == 'startCanStack':
    if len(args) != 0:
        print('startCanStack requires 0 args')
        sys.exit(1)
    pp.pprint(client.startCanStack())

elif cmd == 'stopCanStack':
    if len(args) != 0:
        print('stopCanStack requires 0 args')
        sys.exit(1)
    pp.pprint(client.stopCanStack())

elif cmd == 'clearSend':
    if len(args) != 0:
        print('clearSend requires 0 args')
        sys.exit(1)
    pp.pprint(client.clearSend())

elif cmd == 'setCrcRcConfig':
    if len(args) != 1:
        print('setCrcRcConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.setCrcRcConfig(eval(args[0]),))

elif cmd == 'clearCrcRcConfig':
    if len(args) != 1:
        print('clearCrcRcConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.clearCrcRcConfig(eval(args[0]),))

elif cmd == 'clearAllCrcRcConfig':
    if len(args) != 0:
        print('clearAllCrcRcConfig requires 0 args')
        sys.exit(1)
    pp.pprint(client.clearAllCrcRcConfig())

elif cmd == 'sendCanMessageCycList':
    if len(args) != 1:
        print('sendCanMessageCycList requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendCanMessageCycList(eval(args[0]),))

elif cmd == 'sendCanMessageCyc':
    if len(args) != 1:
        print('sendCanMessageCyc requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendCanMessageCyc(eval(args[0]),))

elif cmd == 'sendCanMessage':
    if len(args) != 1:
        print('sendCanMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendCanMessage(eval(args[0]),))

elif cmd == 'creatTimerEvent':
    if len(args) != 1:
        print('creatTimerEvent requires 1 args')
        sys.exit(1)
    pp.pprint(client.creatTimerEvent(eval(args[0]),))

elif cmd == 'getStackStatus':
    if len(args) != 0:
        print('getStackStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getStackStatus())

elif cmd == 'stopChannelSendCyc':
    if len(args) != 1:
        print('stopChannelSendCyc requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopChannelSendCyc(eval(args[0]),))

elif cmd == 'sendCan':
    if len(args) != 1:
        print('sendCan requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendCan(eval(args[0]),))

elif cmd == 'getChannelBusloadCurrent':
    if len(args) != 1:
        print('getChannelBusloadCurrent requires 1 args')
        sys.exit(1)
    pp.pprint(client.getChannelBusloadCurrent(eval(args[0]),))

elif cmd == 'getChannelBusloadMax':
    if len(args) != 1:
        print('getChannelBusloadMax requires 1 args')
        sys.exit(1)
    pp.pprint(client.getChannelBusloadMax(eval(args[0]),))

elif cmd == 'getChannelBusloadAvg':
    if len(args) != 1:
        print('getChannelBusloadAvg requires 1 args')
        sys.exit(1)
    pp.pprint(client.getChannelBusloadAvg(eval(args[0]),))

elif cmd == 'getChannelErrorFrameTotal':
    if len(args) != 1:
        print('getChannelErrorFrameTotal requires 1 args')
        sys.exit(1)
    pp.pprint(client.getChannelErrorFrameTotal(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
