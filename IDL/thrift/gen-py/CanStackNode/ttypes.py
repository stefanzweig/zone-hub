#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes

from thrift.transport import TTransport
all_structs = []


class canChannelConfig(object):
    """
    Attributes:
     - channel
     - bitrate
     - isFd
     - fdBitrate
     - busType
     - appName
     - sjwAbr
     - sjwDbr
     - tseg1Abr
     - tseg1Dbr
     - tseg2Abr
     - tseg2Dbr
     - txreceipts
     - nsamplepos
     - dsamplepos
     - clockfreq
     - dprescaler
     - nprescaler
     - hardwareChannel

    """


    def __init__(self, channel=None, bitrate=None, isFd=None, fdBitrate=None, busType=None, appName=None, sjwAbr=20, sjwDbr=5, tseg1Abr=59, tseg1Dbr=14, tseg2Abr=20, tseg2Dbr=5, txreceipts=1, nsamplepos=75, dsamplepos=75, clockfreq=80, dprescaler=2, nprescaler=2, hardwareChannel="",):
        self.channel = channel
        self.bitrate = bitrate
        self.isFd = isFd
        self.fdBitrate = fdBitrate
        self.busType = busType
        self.appName = appName
        self.sjwAbr = sjwAbr
        self.sjwDbr = sjwDbr
        self.tseg1Abr = tseg1Abr
        self.tseg1Dbr = tseg1Dbr
        self.tseg2Abr = tseg2Abr
        self.tseg2Dbr = tseg2Dbr
        self.txreceipts = txreceipts
        self.nsamplepos = nsamplepos
        self.dsamplepos = dsamplepos
        self.clockfreq = clockfreq
        self.dprescaler = dprescaler
        self.nprescaler = nprescaler
        self.hardwareChannel = hardwareChannel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.bitrate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isFd = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.fdBitrate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.busType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.appName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.sjwAbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.sjwDbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.tseg1Abr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.tseg1Dbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.tseg2Abr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.tseg2Dbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.txreceipts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I16:
                    self.nsamplepos = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I16:
                    self.dsamplepos = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I16:
                    self.clockfreq = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I16:
                    self.dprescaler = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I16:
                    self.nprescaler = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.hardwareChannel = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('canChannelConfig')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.bitrate is not None:
            oprot.writeFieldBegin('bitrate', TType.I32, 2)
            oprot.writeI32(self.bitrate)
            oprot.writeFieldEnd()
        if self.isFd is not None:
            oprot.writeFieldBegin('isFd', TType.BOOL, 3)
            oprot.writeBool(self.isFd)
            oprot.writeFieldEnd()
        if self.fdBitrate is not None:
            oprot.writeFieldBegin('fdBitrate', TType.I32, 4)
            oprot.writeI32(self.fdBitrate)
            oprot.writeFieldEnd()
        if self.busType is not None:
            oprot.writeFieldBegin('busType', TType.STRING, 5)
            oprot.writeString(self.busType.encode('utf-8') if sys.version_info[0] == 2 else self.busType)
            oprot.writeFieldEnd()
        if self.appName is not None:
            oprot.writeFieldBegin('appName', TType.STRING, 6)
            oprot.writeString(self.appName.encode('utf-8') if sys.version_info[0] == 2 else self.appName)
            oprot.writeFieldEnd()
        if self.sjwAbr is not None:
            oprot.writeFieldBegin('sjwAbr', TType.I32, 7)
            oprot.writeI32(self.sjwAbr)
            oprot.writeFieldEnd()
        if self.sjwDbr is not None:
            oprot.writeFieldBegin('sjwDbr', TType.I32, 8)
            oprot.writeI32(self.sjwDbr)
            oprot.writeFieldEnd()
        if self.tseg1Abr is not None:
            oprot.writeFieldBegin('tseg1Abr', TType.I32, 9)
            oprot.writeI32(self.tseg1Abr)
            oprot.writeFieldEnd()
        if self.tseg1Dbr is not None:
            oprot.writeFieldBegin('tseg1Dbr', TType.I32, 10)
            oprot.writeI32(self.tseg1Dbr)
            oprot.writeFieldEnd()
        if self.tseg2Abr is not None:
            oprot.writeFieldBegin('tseg2Abr', TType.I32, 11)
            oprot.writeI32(self.tseg2Abr)
            oprot.writeFieldEnd()
        if self.tseg2Dbr is not None:
            oprot.writeFieldBegin('tseg2Dbr', TType.I32, 12)
            oprot.writeI32(self.tseg2Dbr)
            oprot.writeFieldEnd()
        if self.txreceipts is not None:
            oprot.writeFieldBegin('txreceipts', TType.I32, 13)
            oprot.writeI32(self.txreceipts)
            oprot.writeFieldEnd()
        if self.nsamplepos is not None:
            oprot.writeFieldBegin('nsamplepos', TType.I16, 14)
            oprot.writeI16(self.nsamplepos)
            oprot.writeFieldEnd()
        if self.dsamplepos is not None:
            oprot.writeFieldBegin('dsamplepos', TType.I16, 15)
            oprot.writeI16(self.dsamplepos)
            oprot.writeFieldEnd()
        if self.clockfreq is not None:
            oprot.writeFieldBegin('clockfreq', TType.I16, 16)
            oprot.writeI16(self.clockfreq)
            oprot.writeFieldEnd()
        if self.dprescaler is not None:
            oprot.writeFieldBegin('dprescaler', TType.I16, 17)
            oprot.writeI16(self.dprescaler)
            oprot.writeFieldEnd()
        if self.nprescaler is not None:
            oprot.writeFieldBegin('nprescaler', TType.I16, 18)
            oprot.writeI16(self.nprescaler)
            oprot.writeFieldEnd()
        if self.hardwareChannel is not None:
            oprot.writeFieldBegin('hardwareChannel', TType.STRING, 19)
            oprot.writeString(self.hardwareChannel.encode('utf-8') if sys.version_info[0] == 2 else self.hardwareChannel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class canChannelConfigs(object):
    """
    Attributes:
     - configs

    """


    def __init__(self, configs=None,):
        self.configs = configs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.configs = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = canChannelConfig()
                        _elem5.read(iprot)
                        self.configs.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('canChannelConfigs')
        if self.configs is not None:
            oprot.writeFieldBegin('configs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.configs))
            for iter6 in self.configs:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class frameCrcRcConfig(object):
    """
    Attributes:
     - channel
     - arbitrationId
     - crcBitStarts
     - rcBitStarts
     - crcTable
     - rcConfig
     - period

    """


    def __init__(self, channel=None, arbitrationId=None, crcBitStarts=None, rcBitStarts=None, crcTable=None, rcConfig=None, period=None,):
        self.channel = channel
        self.arbitrationId = arbitrationId
        self.crcBitStarts = crcBitStarts
        self.rcBitStarts = rcBitStarts
        self.crcTable = crcTable
        self.rcConfig = rcConfig
        self.period = period

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.arbitrationId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.crcBitStarts = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI32()
                        self.crcBitStarts.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.rcBitStarts = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readI32()
                        self.rcBitStarts.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.crcTable = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = iprot.readI32()
                        self.crcTable.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.rcConfig = []
                    (_etype28, _size25) = iprot.readListBegin()
                    for _i29 in range(_size25):
                        _elem30 = iprot.readI32()
                        self.rcConfig.append(_elem30)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.period = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('frameCrcRcConfig')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.arbitrationId is not None:
            oprot.writeFieldBegin('arbitrationId', TType.I32, 2)
            oprot.writeI32(self.arbitrationId)
            oprot.writeFieldEnd()
        if self.crcBitStarts is not None:
            oprot.writeFieldBegin('crcBitStarts', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.crcBitStarts))
            for iter31 in self.crcBitStarts:
                oprot.writeI32(iter31)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rcBitStarts is not None:
            oprot.writeFieldBegin('rcBitStarts', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.rcBitStarts))
            for iter32 in self.rcBitStarts:
                oprot.writeI32(iter32)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.crcTable is not None:
            oprot.writeFieldBegin('crcTable', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.crcTable))
            for iter33 in self.crcTable:
                oprot.writeI32(iter33)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rcConfig is not None:
            oprot.writeFieldBegin('rcConfig', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.rcConfig))
            for iter34 in self.rcConfig:
                oprot.writeI32(iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.period is not None:
            oprot.writeFieldBegin('period', TType.I32, 7)
            oprot.writeI32(self.period)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class timer(object):
    """
    Attributes:
     - timerCycleTime

    """


    def __init__(self, timerCycleTime=None,):
        self.timerCycleTime = timerCycleTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.timerCycleTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('timer')
        if self.timerCycleTime is not None:
            oprot.writeFieldBegin('timerCycleTime', TType.I64, 1)
            oprot.writeI64(self.timerCycleTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class channel(object):
    """
    Attributes:
     - channel

    """


    def __init__(self, channel=None,):
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('channel')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class busload(object):
    """
    Attributes:
     - busload

    """


    def __init__(self, busload=None,):
        self.busload = busload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.busload = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('busload')
        if self.busload is not None:
            oprot.writeFieldBegin('busload', TType.DOUBLE, 1)
            oprot.writeDouble(self.busload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class busloadAll(object):
    """
    Attributes:
     - busload

    """


    def __init__(self, busload=None,):
        self.busload = busload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.busload = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readDouble()
                        self.busload.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('busloadAll')
        if self.busload is not None:
            oprot.writeFieldBegin('busload', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.busload))
            for iter41 in self.busload:
                oprot.writeDouble(iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class errorFrameTotal(object):
    """
    Attributes:
     - errorFrameTotal

    """


    def __init__(self, errorFrameTotal=None,):
        self.errorFrameTotal = errorFrameTotal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorFrameTotal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('errorFrameTotal')
        if self.errorFrameTotal is not None:
            oprot.writeFieldBegin('errorFrameTotal', TType.I32, 1)
            oprot.writeI32(self.errorFrameTotal)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class canMessage(object):
    """
    Attributes:
     - channel
     - isFd
     - id
     - dlc
     - isExtended
     - isRemote
     - data
     - period
     - frameName

    """


    def __init__(self, channel=None, isFd=None, id=None, dlc=None, isExtended=None, isRemote=None, data=None, period=None, frameName=None,):
        self.channel = channel
        self.isFd = isFd
        self.id = id
        self.dlc = dlc
        self.isExtended = isExtended
        self.isRemote = isRemote
        self.data = data
        self.period = period
        self.frameName = frameName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.isFd = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.dlc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.isExtended = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.isRemote = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readI32()
                        self.data.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.period = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.frameName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('canMessage')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.isFd is not None:
            oprot.writeFieldBegin('isFd', TType.I32, 2)
            oprot.writeI32(self.isFd)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 3)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.dlc is not None:
            oprot.writeFieldBegin('dlc', TType.I32, 4)
            oprot.writeI32(self.dlc)
            oprot.writeFieldEnd()
        if self.isExtended is not None:
            oprot.writeFieldBegin('isExtended', TType.I32, 5)
            oprot.writeI32(self.isExtended)
            oprot.writeFieldEnd()
        if self.isRemote is not None:
            oprot.writeFieldBegin('isRemote', TType.I32, 6)
            oprot.writeI32(self.isRemote)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.data))
            for iter48 in self.data:
                oprot.writeI32(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.period is not None:
            oprot.writeFieldBegin('period', TType.I32, 8)
            oprot.writeI32(self.period)
            oprot.writeFieldEnd()
        if self.frameName is not None:
            oprot.writeFieldBegin('frameName', TType.STRING, 9)
            oprot.writeString(self.frameName.encode('utf-8') if sys.version_info[0] == 2 else self.frameName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class canMessages(object):
    """
    Attributes:
     - canMessage

    """


    def __init__(self, canMessage=None,):
        self.canMessage = canMessage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.canMessage = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = canMessage()
                        _elem54.read(iprot)
                        self.canMessage.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('canMessages')
        if self.canMessage is not None:
            oprot.writeFieldBegin('canMessage', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.canMessage))
            for iter55 in self.canMessage:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(canChannelConfig)
canChannelConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.I32, 'bitrate', None, None, ),  # 2
    (3, TType.BOOL, 'isFd', None, None, ),  # 3
    (4, TType.I32, 'fdBitrate', None, None, ),  # 4
    (5, TType.STRING, 'busType', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'appName', 'UTF8', None, ),  # 6
    (7, TType.I32, 'sjwAbr', None, 20, ),  # 7
    (8, TType.I32, 'sjwDbr', None, 5, ),  # 8
    (9, TType.I32, 'tseg1Abr', None, 59, ),  # 9
    (10, TType.I32, 'tseg1Dbr', None, 14, ),  # 10
    (11, TType.I32, 'tseg2Abr', None, 20, ),  # 11
    (12, TType.I32, 'tseg2Dbr', None, 5, ),  # 12
    (13, TType.I32, 'txreceipts', None, 1, ),  # 13
    (14, TType.I16, 'nsamplepos', None, 75, ),  # 14
    (15, TType.I16, 'dsamplepos', None, 75, ),  # 15
    (16, TType.I16, 'clockfreq', None, 80, ),  # 16
    (17, TType.I16, 'dprescaler', None, 2, ),  # 17
    (18, TType.I16, 'nprescaler', None, 2, ),  # 18
    (19, TType.STRING, 'hardwareChannel', 'UTF8', "", ),  # 19
)
all_structs.append(canChannelConfigs)
canChannelConfigs.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'configs', (TType.STRUCT, [canChannelConfig, None], False), None, ),  # 1
)
all_structs.append(frameCrcRcConfig)
frameCrcRcConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.I32, 'arbitrationId', None, None, ),  # 2
    (3, TType.LIST, 'crcBitStarts', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'rcBitStarts', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'crcTable', (TType.I32, None, False), None, ),  # 5
    (6, TType.LIST, 'rcConfig', (TType.I32, None, False), None, ),  # 6
    (7, TType.I32, 'period', None, None, ),  # 7
)
all_structs.append(timer)
timer.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'timerCycleTime', None, None, ),  # 1
)
all_structs.append(channel)
channel.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
)
all_structs.append(busload)
busload.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'busload', None, None, ),  # 1
)
all_structs.append(busloadAll)
busloadAll.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'busload', (TType.DOUBLE, None, False), None, ),  # 1
)
all_structs.append(errorFrameTotal)
errorFrameTotal.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorFrameTotal', None, None, ),  # 1
)
all_structs.append(canMessage)
canMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.I32, 'isFd', None, None, ),  # 2
    (3, TType.I32, 'id', None, None, ),  # 3
    (4, TType.I32, 'dlc', None, None, ),  # 4
    (5, TType.I32, 'isExtended', None, None, ),  # 5
    (6, TType.I32, 'isRemote', None, None, ),  # 6
    (7, TType.LIST, 'data', (TType.I32, None, False), None, ),  # 7
    (8, TType.I32, 'period', None, None, ),  # 8
    (9, TType.STRING, 'frameName', 'UTF8', None, ),  # 9
)
all_structs.append(canMessages)
canMessages.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'canMessage', (TType.STRUCT, [canMessage, None], False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
