#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import CommonNode.ttypes
import CanStackNode.ttypes

from thrift.transport import TTransport
all_structs = []


class pduCrcRcConfig(object):
    """

    PDU crc和rc配置信息结构体


    Attributes:
     - channel: int32
    	需要设置的pdu的软件通道信息
     - pduName: string
    	需要设置的pdu的名字
     - crcBitStarts: int32
    	该字段是可选参数，如知晓crc的信号名可填下方crcName
    	crc起始位信息
     - rcBitStarts: int32
    	该字段是可选参数，如知晓rc的信号名可填下方rcName
    	rc起始位信息
     - crcTable: list[int8]
    	该字段是可选参数，如不填默认使用crc8表
    	crc对应表信息
     - crcName: int32
    	该字段是可选参数，如知晓crc的起始位可填上方crcBitStarts
    	crc信号名字
     - rcName: int32
    	该字段是可选参数，如知晓rc的起始位可填上方rcBitStarts
    	rc信号名字
     - rcConfig: list[int32]
    	rc配置信息为列表，长度>=3，例如[0,14,2]，0代表counter最小值，14代表最大值，步长为2，对应couter值变化0,2,4,6,8,10,12,14,0...

    """


    def __init__(self, channel=None, pduName=None, crcBitStarts=None, rcBitStarts=None, crcTable=None, crcName=None, rcName=None, rcConfig=None,):
        self.channel = channel
        self.pduName = pduName
        self.crcBitStarts = crcBitStarts
        self.rcBitStarts = rcBitStarts
        self.crcTable = crcTable
        self.crcName = crcName
        self.rcName = rcName
        self.rcConfig = rcConfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pduName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.crcBitStarts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.rcBitStarts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.crcTable = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.crcTable.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.crcName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.rcName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.rcConfig = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.rcConfig.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pduCrcRcConfig')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.pduName is not None:
            oprot.writeFieldBegin('pduName', TType.STRING, 2)
            oprot.writeString(self.pduName.encode('utf-8') if sys.version_info[0] == 2 else self.pduName)
            oprot.writeFieldEnd()
        if self.crcBitStarts is not None:
            oprot.writeFieldBegin('crcBitStarts', TType.I32, 3)
            oprot.writeI32(self.crcBitStarts)
            oprot.writeFieldEnd()
        if self.rcBitStarts is not None:
            oprot.writeFieldBegin('rcBitStarts', TType.I32, 5)
            oprot.writeI32(self.rcBitStarts)
            oprot.writeFieldEnd()
        if self.crcTable is not None:
            oprot.writeFieldBegin('crcTable', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.crcTable))
            for iter12 in self.crcTable:
                oprot.writeI32(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.crcName is not None:
            oprot.writeFieldBegin('crcName', TType.STRING, 8)
            oprot.writeString(self.crcName.encode('utf-8') if sys.version_info[0] == 2 else self.crcName)
            oprot.writeFieldEnd()
        if self.rcName is not None:
            oprot.writeFieldBegin('rcName', TType.STRING, 9)
            oprot.writeString(self.rcName.encode('utf-8') if sys.version_info[0] == 2 else self.rcName)
            oprot.writeFieldEnd()
        if self.rcConfig is not None:
            oprot.writeFieldBegin('rcConfig', TType.LIST, 10)
            oprot.writeListBegin(TType.I32, len(self.rcConfig))
            for iter13 in self.rcConfig:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class paddingBitInfo(object):
    """

    PDU 填充位赋值信息结构


    Attributes:
     - msbStartBit: int32
    	填充位MSB起始位置
     - bitLen: int32
    	需要填充位长度，就是从起始位开始需要多少个位被赋值
     - value: int64
    	这些填充位需要被赋予的值，按bit来看

    """


    def __init__(self, msbStartBit=None, bitLen=None, value=None,):
        self.msbStartBit = msbStartBit
        self.bitLen = bitLen
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.msbStartBit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.bitLen = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('paddingBitInfo')
        if self.msbStartBit is not None:
            oprot.writeFieldBegin('msbStartBit', TType.I32, 1)
            oprot.writeI32(self.msbStartBit)
            oprot.writeFieldEnd()
        if self.bitLen is not None:
            oprot.writeFieldBegin('bitLen', TType.I32, 2)
            oprot.writeI32(self.bitLen)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I64, 3)
            oprot.writeI64(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pduUpdate(object):
    """

    PDU 更新值信息结构体


    Attributes:
     - channel: int32
    	更新pdu对象所在的软件通道信息
     - pduName: int32
    	更新pdu对象名字
     - data: list[int32]
    	可选参数，可以选择直接更新原始值
    	更新pdu对象原始值,如[1,2,3,4,5,6,7,8]
     - context: string
    	可选参数，可以选择直接更新信号值，其中信号值为phy
    	更新pdu对象中信号值，例如{'siga'：'ON'，'sigb':17.5},然后将该字典json dumps至string传递
     - context_raw: string
    	可选参数，可以选择直接更新信号值，其中信号值为raw
    	更新pdu对象中信号值，例如{'siga'：1，'sigb':0},然后将该字典json dumps至string传递
     - padding_bit_list: paddingBitInfo
    	更新pdu对象中填充位信息，同时也可以更新有信号填充位，该参数优先级高于context值

    """


    def __init__(self, channel=None, pduName=None, data=[
    ], context="", context_raw="", padding_bit_list=[
    ],):
        self.channel = channel
        self.pduName = pduName
        if data is self.thrift_spec[3][4]:
            data = [
            ]
        self.data = data
        self.context = context
        self.context_raw = context_raw
        if padding_bit_list is self.thrift_spec[6][4]:
            padding_bit_list = [
            ]
        self.padding_bit_list = padding_bit_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pduName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI32()
                        self.data.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.context = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.context_raw = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.padding_bit_list = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = paddingBitInfo()
                        _elem25.read(iprot)
                        self.padding_bit_list.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pduUpdate')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.pduName is not None:
            oprot.writeFieldBegin('pduName', TType.STRING, 2)
            oprot.writeString(self.pduName.encode('utf-8') if sys.version_info[0] == 2 else self.pduName)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.data))
            for iter26 in self.data:
                oprot.writeI32(iter26)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.STRING, 4)
            oprot.writeString(self.context.encode('utf-8') if sys.version_info[0] == 2 else self.context)
            oprot.writeFieldEnd()
        if self.context_raw is not None:
            oprot.writeFieldBegin('context_raw', TType.STRING, 5)
            oprot.writeString(self.context_raw.encode('utf-8') if sys.version_info[0] == 2 else self.context_raw)
            oprot.writeFieldEnd()
        if self.padding_bit_list is not None:
            oprot.writeFieldBegin('padding_bit_list', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.padding_bit_list))
            for iter27 in self.padding_bit_list:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pduMessage(object):
    """

    单条PDU发送信息


    Attributes:
     - channel: int32
    	发送pdu对象所在的软件通道信息
     - pduName: string
    	发送pdu对象名字
     - period: int32
    	发送pdu周期，单位ms
     - times: int32
    	发送pdu次数

    """


    def __init__(self, channel=None, pduName=None, period=None, times=None,):
        self.channel = channel
        self.pduName = pduName
        self.period = period
        self.times = times

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pduName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.period = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.times = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pduMessage')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.pduName is not None:
            oprot.writeFieldBegin('pduName', TType.STRING, 2)
            oprot.writeString(self.pduName.encode('utf-8') if sys.version_info[0] == 2 else self.pduName)
            oprot.writeFieldEnd()
        if self.period is not None:
            oprot.writeFieldBegin('period', TType.I32, 3)
            oprot.writeI32(self.period)
            oprot.writeFieldEnd()
        if self.times is not None:
            oprot.writeFieldBegin('times', TType.I32, 4)
            oprot.writeI32(self.times)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pduMessages(object):
    """

    多条PDU发送信息


    Attributes:
     - message: list[pduMessage]
    	发送pdu列表，元素为本文件中pduMessage结构体

    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.message = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = pduMessage()
                        _elem33.read(iprot)
                        self.message.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pduMessages')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.message))
            for iter34 in self.message:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class subscribeInfo(object):
    """

    CAN解析节点订阅信息结构体


    Attributes:
     - channel: int32
    	发送订阅对象所在的软件通道信息
     - name: string
    	发送订阅对象名字，可以是信号名，PDU名字，Frame的名字
     - type: string
    	发送订阅对象类型，可以'message','frame','signal','pdu'
     - frameId: int32
    	发送订阅对象类型为'message'时，需要设置该参数为对应报文的ID

    """


    def __init__(self, channel=None, name=None, type=None, frameId=None,):
        self.channel = channel
        self.name = name
        self.type = type
        self.frameId = frameId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.frameId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('subscribeInfo')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.frameId is not None:
            oprot.writeFieldBegin('frameId', TType.I32, 4)
            oprot.writeI32(self.frameId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dbPath(object):
    """

    CAN数据库路径


    Attributes:
     - result: CommonNode.result
    	该参数历史原因，保留，不用赋值
     - dbPath: string
    	数据库文件绝对路径

    """


    def __init__(self, result=None, dbPath=None,):
        self.result = result
        self.dbPath = dbPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dbPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dbPath')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.dbPath is not None:
            oprot.writeFieldBegin('dbPath', TType.STRING, 2)
            oprot.writeString(self.dbPath.encode('utf-8') if sys.version_info[0] == 2 else self.dbPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dbConfigs(object):
    """

    ARXML 每路CAN配置软件通道


    Attributes:
     - result: CommonNode.result
    	该参数历史原因，保留，不用赋值
     - configs: list[dbConfigPair]
    	所有软件通道与arxml中通道匹配，元素该文件中的dbConfigPair结构体

    """


    def __init__(self, result=None, configs=None,):
        self.result = result
        self.configs = configs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.configs = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = dbConfigPair()
                        _elem40.read(iprot)
                        self.configs.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dbConfigs')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.configs is not None:
            oprot.writeFieldBegin('configs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.configs))
            for iter41 in self.configs:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dbConfigPair(object):
    """

    ARXML 单路CAN配置软件通道


    Attributes:
     - channel: int32
    	软件通道信息
     - dbName: string
    	对应软件通道需要赋与ARXML信息，如BDCAN

    """


    def __init__(self, channel=None, dbName=None,):
        self.channel = channel
        self.dbName = dbName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dbName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dbConfigPair')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.dbName is not None:
            oprot.writeFieldBegin('dbName', TType.STRING, 2)
            oprot.writeString(self.dbName.encode('utf-8') if sys.version_info[0] == 2 else self.dbName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class canDbInfo(object):
    """

    CAN arxml信息


    Attributes:
     - result: CommonNode.result
    	请求状态返回值，发送时不需要赋值
     - strJson: string
    	返回当前设置的arxml后解析的值，该值为字符串，json.loads()后为需要的字典

    """


    def __init__(self, result=None, strJson=None,):
        self.result = result
        self.strJson = strJson

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.strJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('canDbInfo')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.strJson is not None:
            oprot.writeFieldBegin('strJson', TType.STRING, 2)
            oprot.writeString(self.strJson.encode('utf-8') if sys.version_info[0] == 2 else self.strJson)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class iSignalIPduObj(object):
    """
    Attributes:
     - channel
     - pduName
     - pduContext

    """


    def __init__(self, channel=None, pduName=None, pduContext=None,):
        self.channel = channel
        self.pduName = pduName
        self.pduContext = pduContext

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pduName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pduContext = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('iSignalIPduObj')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.pduName is not None:
            oprot.writeFieldBegin('pduName', TType.STRING, 2)
            oprot.writeString(self.pduName.encode('utf-8') if sys.version_info[0] == 2 else self.pduName)
            oprot.writeFieldEnd()
        if self.pduContext is not None:
            oprot.writeFieldBegin('pduContext', TType.STRING, 3)
            oprot.writeString(self.pduContext.encode('utf-8') if sys.version_info[0] == 2 else self.pduContext)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class iSignalIPduEncode(object):
    """
    Attributes:
     - result
     - length
     - data

    """


    def __init__(self, result=None, length=None, data=None,):
        self.result = result
        self.length = length
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode.ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readI32()
                        self.data.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('iSignalIPduEncode')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I32, 2)
            oprot.writeI32(self.length)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.data))
            for iter48 in self.data:
                oprot.writeI32(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class convertInput(object):
    """

    arxml转换py,json入参


    Attributes:
     - srcFile: string
    	源文件地址，绝对路径
     - dstFile: string
    	目标文件地址，绝对路径

    """


    def __init__(self, srcFile=None, dstFile=None,):
        self.srcFile = srcFile
        self.dstFile = dstFile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.srcFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dstFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('convertInput')
        if self.srcFile is not None:
            oprot.writeFieldBegin('srcFile', TType.STRING, 1)
            oprot.writeString(self.srcFile.encode('utf-8') if sys.version_info[0] == 2 else self.srcFile)
            oprot.writeFieldEnd()
        if self.dstFile is not None:
            oprot.writeFieldBegin('dstFile', TType.STRING, 2)
            oprot.writeString(self.dstFile.encode('utf-8') if sys.version_info[0] == 2 else self.dstFile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(pduCrcRcConfig)
pduCrcRcConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'pduName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'crcBitStarts', None, None, ),  # 3
    None,  # 4
    (5, TType.I32, 'rcBitStarts', None, None, ),  # 5
    None,  # 6
    (7, TType.LIST, 'crcTable', (TType.I32, None, False), None, ),  # 7
    (8, TType.STRING, 'crcName', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'rcName', 'UTF8', None, ),  # 9
    (10, TType.LIST, 'rcConfig', (TType.I32, None, False), None, ),  # 10
)
all_structs.append(paddingBitInfo)
paddingBitInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'msbStartBit', None, None, ),  # 1
    (2, TType.I32, 'bitLen', None, None, ),  # 2
    (3, TType.I64, 'value', None, None, ),  # 3
)
all_structs.append(pduUpdate)
pduUpdate.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'pduName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'data', (TType.I32, None, False), [
    ], ),  # 3
    (4, TType.STRING, 'context', 'UTF8', "", ),  # 4
    (5, TType.STRING, 'context_raw', 'UTF8', "", ),  # 5
    (6, TType.LIST, 'padding_bit_list', (TType.STRUCT, [paddingBitInfo, None], False), [
    ], ),  # 6
)
all_structs.append(pduMessage)
pduMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'pduName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'period', None, None, ),  # 3
    (4, TType.I32, 'times', None, None, ),  # 4
)
all_structs.append(pduMessages)
pduMessages.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'message', (TType.STRUCT, [pduMessage, None], False), None, ),  # 1
)
all_structs.append(subscribeInfo)
subscribeInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
    (4, TType.I32, 'frameId', None, None, ),  # 4
)
all_structs.append(dbPath)
dbPath.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode.ttypes.result, None], None, ),  # 1
    (2, TType.STRING, 'dbPath', 'UTF8', None, ),  # 2
)
all_structs.append(dbConfigs)
dbConfigs.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode.ttypes.result, None], None, ),  # 1
    (2, TType.LIST, 'configs', (TType.STRUCT, [dbConfigPair, None], False), None, ),  # 2
)
all_structs.append(dbConfigPair)
dbConfigPair.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
)
all_structs.append(canDbInfo)
canDbInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode.ttypes.result, None], None, ),  # 1
    (2, TType.STRING, 'strJson', 'UTF8', None, ),  # 2
)
all_structs.append(iSignalIPduObj)
iSignalIPduObj.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.STRING, 'pduName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'pduContext', 'UTF8', None, ),  # 3
)
all_structs.append(iSignalIPduEncode)
iSignalIPduEncode.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode.ttypes.result, None], None, ),  # 1
    (2, TType.I32, 'length', None, None, ),  # 2
    (3, TType.LIST, 'data', (TType.I32, None, False), None, ),  # 3
)
all_structs.append(convertInput)
convertInput.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'srcFile', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dstFile', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
