#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
sys.path.append("..")
from IDL.thrift.CommonNode import ttypes as CommonNode_ttypes

from thrift.transport import TTransport
all_structs = []


class linMessageConfig(object):
    """
    Attributes:
     - id: int32
    	LIN报文ID
     - simu: bool
    	LIN报文是否仿真
     - channel: int32
    	LIN报文所在的软件通道

    """


    def __init__(self, id=None, simu=None, channel=None,):
        self.id = id
        self.simu = simu
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.simu = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('linMessageConfig')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.simu is not None:
            oprot.writeFieldBegin('simu', TType.BOOL, 2)
            oprot.writeBool(self.simu)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 3)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class linHeaderConfig(object):
    """
    Attributes:
     - channel: int32
    	LIN节点所在的软件通道
     - simu: bool
    	LIN调度表是否需要仿真，此功能只适用于主节点模式

    """


    def __init__(self, channel=None, simu=None,):
        self.channel = channel
        self.simu = simu

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.BOOL:
                    self.simu = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('linHeaderConfig')
        if self.simu is not None:
            oprot.writeFieldBegin('simu', TType.BOOL, 1)
            oprot.writeBool(self.simu)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 2)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class linMessageDataT(object):
    """
    Attributes:
     - channel: int32
    	LIN报文所在的软件通道
     - id: int32
    	LIN报文ID
     - data: list[int32]
    	LIN报文源数据

    """


    def __init__(self, channel=None, id=None, data=None,):
        self.channel = channel
        self.id = id
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.data.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('linMessageDataT')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.data))
            for iter6 in self.data:
                oprot.writeI32(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class linStackStatus(object):
    """
    Attributes:
     - result: result
    	调用结果返回值，为result类
     - status: int32
    	比如 0->正在运行; 1->未运行; 2->没有硬件;等等
     - strStatus: string
    	预留，显示字符串提示信息

    """


    def __init__(self, result=None, status=None, strStatus=None,):
        self.result = result
        self.status = status
        self.strStatus = strStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = CommonNode_ttypes.result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.strStatus = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('linStackStatus')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.strStatus is not None:
            oprot.writeFieldBegin('strStatus', TType.STRING, 3)
            oprot.writeString(self.strStatus.encode('utf-8') if sys.version_info[0] == 2 else self.strStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class linCrcConfig(object):
    """
    Attributes:
     - channel: int32
    	需要设置CRC报文所在软件通道
     - id: int32
    	需要设置CRC报文ID
     - crcBitStart: int32
    	需要设置CRC所在起始位
     - rcBitStart: int32
    	需要设置RC所在起始位
     - crcBitLen: int32
    	需要设置CRC信号所占的位长度
     - rcBitLen: int32
    	需要设置RC信号所占的位长度
     - rcMinValue: int32
    	需要设置RC最小值
     - rcMaxValue: int32
    	需要设置RC最大值
     - crcTable: list[int32]
    	CRC table
     - stepLen: int32
    	RC步长设置

    """


    def __init__(self, channel=None, id=None, crcBitStart=None, rcBitStart=None, crcBitLen=None, rcBitLen=None, rcMinValue=None, rcMaxValue=None, crcTable=None, stepLen=None,):
        self.channel = channel
        self.id = id
        self.crcBitStart = crcBitStart
        self.rcBitStart = rcBitStart
        self.crcBitLen = crcBitLen
        self.rcBitLen = rcBitLen
        self.rcMinValue = rcMinValue
        self.rcMaxValue = rcMaxValue
        self.crcTable = crcTable
        self.stepLen = stepLen

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.crcBitStart = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rcBitStart = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.crcBitLen = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.rcBitLen = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.rcMinValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.rcMaxValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.crcTable = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI32()
                        self.crcTable.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.stepLen = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('linCrcConfig')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.crcBitStart is not None:
            oprot.writeFieldBegin('crcBitStart', TType.I32, 3)
            oprot.writeI32(self.crcBitStart)
            oprot.writeFieldEnd()
        if self.rcBitStart is not None:
            oprot.writeFieldBegin('rcBitStart', TType.I32, 4)
            oprot.writeI32(self.rcBitStart)
            oprot.writeFieldEnd()
        if self.crcBitLen is not None:
            oprot.writeFieldBegin('crcBitLen', TType.I32, 5)
            oprot.writeI32(self.crcBitLen)
            oprot.writeFieldEnd()
        if self.rcBitLen is not None:
            oprot.writeFieldBegin('rcBitLen', TType.I32, 6)
            oprot.writeI32(self.rcBitLen)
            oprot.writeFieldEnd()
        if self.rcMinValue is not None:
            oprot.writeFieldBegin('rcMinValue', TType.I32, 7)
            oprot.writeI32(self.rcMinValue)
            oprot.writeFieldEnd()
        if self.rcMaxValue is not None:
            oprot.writeFieldBegin('rcMaxValue', TType.I32, 8)
            oprot.writeI32(self.rcMaxValue)
            oprot.writeFieldEnd()
        if self.crcTable is not None:
            oprot.writeFieldBegin('crcTable', TType.LIST, 9)
            oprot.writeListBegin(TType.I32, len(self.crcTable))
            for iter13 in self.crcTable:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.stepLen is not None:
            oprot.writeFieldBegin('stepLen', TType.I32, 10)
            oprot.writeI32(self.stepLen)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(linMessageConfig)
linMessageConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.BOOL, 'simu', None, None, ),  # 2
    (3, TType.I32, 'channel', None, None, ),  # 3
)
all_structs.append(linHeaderConfig)
linHeaderConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'simu', None, None, ),  # 1
    (2, TType.I32, 'channel', None, None, ),  # 2
)
all_structs.append(linMessageDataT)
linMessageDataT.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
    (3, TType.LIST, 'data', (TType.I32, None, False), None, ),  # 3
)
all_structs.append(linStackStatus)
linStackStatus.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [CommonNode_ttypes.result, None], None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.STRING, 'strStatus', 'UTF8', None, ),  # 3
)
all_structs.append(linCrcConfig)
linCrcConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
    (3, TType.I32, 'crcBitStart', None, None, ),  # 3
    (4, TType.I32, 'rcBitStart', None, None, ),  # 4
    (5, TType.I32, 'crcBitLen', None, None, ),  # 5
    (6, TType.I32, 'rcBitLen', None, None, ),  # 6
    (7, TType.I32, 'rcMinValue', None, None, ),  # 7
    (8, TType.I32, 'rcMaxValue', None, None, ),  # 8
    (9, TType.LIST, 'crcTable', (TType.I32, None, False), None, ),  # 9
    (10, TType.I32, 'stepLen', None, None, ),  # 10
)
fix_spec(all_structs)
del all_structs
